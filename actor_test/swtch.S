### Context switch
### void tt_swtch(tt_context_t *from, tt_context_t to);
### Save current register context in 'from'
### and then load register context from 'to'.

# #define TT_SWTCH _tt_swtch
#define TT_SWTCH tt_swtch

# #if defined(__i386__)
	.globl TT_SWTCH
TT_SWTCH:
#        movl 4(%esp), %eax      # from
#        movl 8(%esp), %edx      # to

        ## Save old callee-save registers 
#        pushl %ebp
#        pushl %ebx
#        pushl %esi
#        pushl %edi

	push	{r0, r4-r7, lr}		@ No one use this r0

	mov	r2, r8
	mov	r3, r9
	mov	r4, r10
	mov	r5, r11
	mov	r6, r12
	push	{r2-r6}

        ## Switch stacks
#        movl %esp, (%eax)       # *from = sp
	mov r2, sp
	str	r2, [r0]		@ *from = sp
#        movl %edx, %esp         # sp = to
	mov	sp, r1		@ sp = to

	## Prevent new thred (generated by tt_new_thread) from returning normaly
	## This code make sence only if 'to' refers to new thread's context
	movs	r2, #0
	mov	lr, r2		@ lr <- 0

        ## Load new callee-save registers
#        popl %edi
#        popl %esi
#        popl %ebx
#        popl %ebp

#        ret

	pop {r2-r6}
	mov	r8, r2
	mov	r9, r3
	mov	r10, r4
	mov	r11, r5
	mov	r12, r6


	pop	{r0, r4-r7, pc}		@ New tthread use this r0
